//since imageUrl is required by the List schema, it's better to put the widget here and make it a required input

//   <!-- Basic HTML Form -->
// <form action="/send-data-here" method="post">
//   <label for="first">First name:</label>
//   <input type="text" id="first" name="first" />
//   <label for="last">Last name:</label>
//   <input type="text" id="last" name="last" />
//   <button type="submit">Submit</button>
// </form>

import React, { useState, useContext } from "react";
import { User } from "../../types/types";
import UploadWidget from "../UploadWidget";
import { List } from "../../types/types";
import { UserDataContext } from "../../contexts/UserDataContext";


const labelClass = "w-full text-base font-bold text-gray-800";
const inputClass = "border-black border-2 rounded-md min-w-50 w-fit text-black";

interface CreateListFormProps {
  listInput: User | {},
  setListInput: React.Dispatch<React.SetStateAction<{}>>
}

//id, author, imagePath: from User Auth
//createdAt: either manually entered or autogenerated by db

// const initialListInput: List = {
//   id: ,
//   title: ,
//   author: ,
//   imagePath: ,
//   description: ,
//   createdAt: ,
//   tags: ,
//   public: ,
//   points: ,
// }

function CreateListForm() {
  
  const [imgUploaded, setImgUploaded] = useState<boolean>(false);
  const [listInput, setListInput] = useState<any>(null)
  const { userData } = useContext(UserDataContext);
  console.log({userData})
  
  // const listFormSubmitHandler = (e) => {
  //   e.preventDefault();
  //   const inputData = {
  //       title: listInput.title,
  //       author: userData?.name,
  //       imagePath: ,
  //       description: listInput.description,
  //       tags: listInput.tags,
  //       public: listInput.public,
  //       points: ,
  //   };
  // }


  const titleInputHandler= (e: any) => {
    setListInput({...listInput, title: e.target.value})
  }  
  const descriptionInputHandler= (e: any) => {
    setListInput({...listInput, description: e.target.value})
  }  
  const tagsInputHandler= (e: any) => {
    setListInput({...listInput, tags: e.target.value})
  }  
  const publicInputHandler= (e: any) => {
    setListInput({...listInput, public: e.target.value})
  }

  return (
    <form
      action=""
      className="mt-10
    flex
    flex-col
    "
    >
      <label htmlFor="Title" className={labelClass}>
        Title
      </label>
      <input
        id="Title"
        type="text"
        className={inputClass}
        onChange={titleInputHandler}
        required
      />
      <label htmlFor="Description" className={labelClass}>
        Description
      </label>
      <input
        id="Description"
        type="textarea"
        className={inputClass}
        onChange={descriptionInputHandler}
        required
      />

      <label htmlFor="Tags" className={labelClass}>
        Tags
      </label>
      <input
        id="Tags"
        type="text"
        placeholder="#tree #park #skate-park..."
        className={inputClass}
        onChange={tagsInputHandler}
      />

      <label htmlFor="Public" className={labelClass}>
        Make post public?
      </label>
      <span>
        <input id="Public" type="checkbox" onChange={publicInputHandler} />
      </span>

      <UploadWidget setImgUploaded={setImgUploaded} />

      <button
        type="submit"
        className="border-black border-2 rounded-md min-w-50 w-fit text-black mt-4 p-1"
      >
        Submit
      </button>
    </form>
  );
}

export default CreateListForm;
